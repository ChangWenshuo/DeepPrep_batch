#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Filename: SPZ_mcplot.py
# Author: Chang Wenshuo
# Date: 6/5/2025

"""
This script processes motion correction parameter files from fMRI preprocessing, 
generates motion parameter plots, and merges them into summary images for each subject.

Functions:
----------
plot_motion(par_file):
    Generates and displays motion parameter plots (rotations, translations, displacement) from a given FSL .par file using Nipype's PlotMotionParams interface.

mcplot_merge(mc_images, out_path):
    Merges a list of motion parameter plot images vertically into a single image and saves the result to the specified output path.

Workflow:
---------
1. Defines root, input, and output directories for the experiment.
2. Finds all subject functional directories.
3. For each subject:
    a. Locates the motion correction parameter file (.par).
    b. Generates motion parameter plots for rotations, translations, and displacement.
    c. Collects the generated plot images.
    d. Merges the images into a single summary image per subject and saves it to the output directory.
"""

from os.path import join as opj
from glob import glob as gg
import os

def plot_motion(par_file):
    """
    Generates and displays motion parameter plots from a given FSL .par file.
    """
    from nipype.interfaces.fsl import PlotMotionParams
    mc_types = ['rotations', 'translations','displacement']
    for plot_type in mc_types:
        plot_motion = PlotMotionParams(in_file = par_file, 
                                    in_source='fsl',
                                    plot_type = plot_type)
        plot_motion.run()

def mcplot_merge(mc_images, out_path):
    """
    Merges a list of image files vertically into a single image and saves the result.
    """
    from PIL import Image
    mc_images.sort()
    (w, h) = (677, 173)
    toImage = Image.new('RGBA',(w,h*len(mc_images)))
    for i, ff in enumerate(mc_images):
        if i==0: sub = ff.split('/')[-1].split('_')[0]
        fromImge = Image.open(ff)
        loc = (0, i*h)
        toImage.paste(fromImge, loc)
    toImage.save(f'{out_path}/{sub}_mc.png')

# root path
RootPath = '/home/wenshuo/DATA/Experiments/SPZ/mri_bids'
StatPath = opj(RootPath,'derivatives')
InPath = opj(StatPath, 'deepprep', 'BOLD')
OutPath = opj(StatPath, 'mcplot')
# create output directory
os.makedirs(OutPath, exist_ok=True)

# get subject list
SubjFiles = gg(opj(InPath, 'sub-*','func'))
SubjFiles.sort()

# subject-level loop
for i, subj in enumerate(SubjFiles):
    # get par file generated by mcflirt
    par_files = gg(opj(subj, '*mcf*.par'))
    if not par_files:  # ensure par_files is not empty
        par_file = par_files[0]
    else:
        print(f'No par file found for subject: {subj}')
    # run PlotMotionParams
    plot_motion(par_file)

    if mc_images:  # ensure mc_images is not empty
        mcplot_merge(mc_images, OutPath)
    else:
        print(f'No motion correction plots found for subject: {subj}')
    # merge the three motion plots
    mc_images = gg(opj(subj, '*mcf*.png'))
    mcplot_merge(mc_images, OutPath)
